{"report":{"reportPrefix":"CHROME_109.0.5414.119__","assertionsCount":0,"lastError":null,"skipped":[],"time":"4.992","timeMs":4992,"completed":{"Drag and Drop":{"time":"4.992","assertions":[],"commands":[],"passed":0,"errors":0,"failed":0,"skipped":0,"tests":0,"status":"pass","steps":[],"stackTrace":"","testcases":{"Drag and Drop":{"time":"4.992","assertions":[],"tests":0,"commands":[],"passed":0,"errors":0,"failed":0,"skipped":0,"status":"pass","steps":[],"stackTrace":"","timeMs":4992,"startTimestamp":"Thu, 02 Feb 2023 09:47:13 GMT","endTimestamp":"Thu, 02 Feb 2023 09:47:18 GMT"}},"timeMs":4992,"startTimestamp":"Thu, 02 Feb 2023 09:47:13 GMT","endTimestamp":"Thu, 02 Feb 2023 09:47:18 GMT"}},"completedSections":{"__global_beforeEach_hook":{"time":0,"assertions":[],"commands":[],"passed":0,"errors":0,"failed":0,"skipped":0,"tests":0,"status":"pass"},"__before_hook":{"time":0,"assertions":[],"commands":[],"passed":0,"errors":0,"failed":0,"skipped":0,"tests":0,"status":"pass"},"Drag and Drop":{"time":0,"assertions":[],"commands":[{"name":"url","args":["http://tutorials.actionqa.com/yt/nw/dndexample.htm"],"startTime":1675331233259,"endTime":1675331234222,"elapsedTime":963,"status":"pass","result":{"status":0}},{"name":"pause","args":["2000"],"startTime":1675331234224,"endTime":1675331236226,"elapsedTime":2002,"status":"pass"},{"name":"execute","args":["  (function(selectorDraggable, selectorDroppable) {\n    var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar dnd;\n(function (dnd) {\n    \"use strict\";\n    function simulate(draggable, droppable) {\n        var store = new DragDataStore();\n        // For the dragstart event. New data can be added to the drag data store.\n        store.mode = \"readwrite\";\n        var dataTransfer = new DataTransfer(store);\n        var dragstartEvent = createEventWithDataTransfer(\"dragstart\", dataTransfer);\n        draggable.dispatchEvent(dragstartEvent);\n        // For the drop event. The list of items representing dragged data can be\n        // read, including the data. No new data can be added.\n        store.mode = \"readonly\";\n        var dragOverEvent = createEventWithDataTransfer(\"dragover\", dataTransfer);\n        droppable.dispatchEvent(dragOverEvent);\n        var dropEvent = createEventWithDataTransfer(\"drop\", dataTransfer);\n        droppable.dispatchEvent(dropEvent);\n        // For all other events. The formats and kinds in the drag data store list\n        // of items representing dragged data can be enumerated, but the data itself\n        // is unavailable and no new data can be added.\n        store.mode = \"protected\";\n        var dragendEvent = createEventWithDataTransfer(\"dragend\", dataTransfer);\n        draggable.dispatchEvent(dragendEvent);\n    }\n    dnd.simulate = simulate;\n    /**\n     * Creates an event instance with a DataTransfer.\n     */\n    function createEventWithDataTransfer(type, dataTransfer) {\n        var event = document.createEvent(\"CustomEvent\");\n        event.initCustomEvent(type, true, true, null);\n        event.dataTransfer = dataTransfer;\n        return event;\n    }\n    /**\n     * DataTransfer objects are used to expose the drag data store that underlies\n     * a drag-and-drop operation.\n     *\n     * @see https://html.spec.whatwg.org/multipage/interaction.html#datatransferitem\n     */\n    var DataTransfer = (function () {\n        function DataTransfer(store) {\n            this.store = store;\n            /**\n             * @see DataTransfer#setData\n             */\n            this.typeTable = {};\n            /**\n             * Returns the kinds of operations that are to be allowed.\n             *\n             * Can be set (during the dragstart event), to change the allowed\n             * operations.\n             *\n             * The possible values are \"none\", \"copy\", \"copyLink\", \"copyMove\", \"link\",\n             * \"linkMove\", \"move\", \"all\", and \"uninitialized\",\n             */\n            this.effectAllowed = \"uninitialized\";\n            /**\n             * Returns an array listing the formats that were set in the dragstart\n             * event. In addition, if any files are being dragged, then one of the types\n             * will be the string \"Files\".\n             */\n            this.types = [];\n            /**\n             * Returns a FileList of the files being dragged, if any.\n             */\n            this.files = new FileList();\n        }\n        /**\n         * Uses the given element to update the drag feedback, replacing any\n         * previously specified feedback.\n         */\n        DataTransfer.prototype.setDragImage = function (element, x, y) {\n            // Do nothing.\n        };\n        /**\n         * Returns the specified data. If there is no such data, returns the empty\n         * string.\n         */\n        DataTransfer.prototype.getData = function (format) {\n            // If the DataTransfer object is no longer associated with a drag data\n            // store, return the empty string and abort these steps.\n            // If the drag data store's mode is in the protected mode, return the empty\n            // string and abort these steps.\n            if (this.store.mode === \"protected\") {\n                return \"\";\n            }\n            // Let format be the first argument, converted to ASCII lowercase.\n            format = format.toLowerCase();\n            // Let convert-to-URL be false.\n            var convertToUrl = false;\n            if (format === \"text\") {\n                // If format equals \"text\", change it to \"text/plain\".\n                format = \"text/plain\";\n            }\n            else if (format === \"url\") {\n                // If format equals \"url\", change it to \"text/uri-list\" and set\n                // convert-to-URL to true.\n                format = \"text/uri-list\";\n                convertToUrl = true;\n            }\n            // If there is no item in the drag data store item list whose kind is Plain\n            // Unicode string and whose type string is equal to format, return the empty\n            // string and abort these steps.\n            if (!(format in this.typeTable)) {\n                return \"\";\n            }\n            // Let result be the data of the item in the drag data store item list whose\n            // kind is Plain Unicode string and whose type string is equal to format.\n            var result = this.typeTable[format];\n            // If convert-to-URL is true, then parse result as appropriate for\n            // text/uri-list data, and then set result to the first URL from the list,\n            // if any, or the empty string otherwise. [RFC2483]\n            if (convertToUrl) {\n                result = parseTextUriList(result)[0] || \"\";\n            }\n            // Return result.\n            return result;\n        };\n        /**\n         * Adds the specified data.\n         */\n        DataTransfer.prototype.setData = function (format, data) {\n            // If the DataTransfer object is no longer associated with a drag data\n            // store, abort these steps. Nothing happens.\n            if (!this.store) {\n                return;\n            }\n            // If the drag data store's mode is not the read/write mode, abort these\n            // steps. Nothing happens.\n            if (this.store.mode !== \"readwrite\") {\n                return;\n            }\n            // Let format be the first argument, converted to ASCII lowercase.\n            format = format.toLowerCase();\n            // If format equals \"text\", change it to \"text/plain\".\n            // If format equals \"url\", change it to \"text/uri-list\".\n            if (format === \"text\") {\n                format = \"text/plain\";\n            }\n            else if (format === \"url\") {\n                format = \"text/uri-list\";\n            }\n            // Remove the item in the drag data store item list whose kind is Plain\n            // Unicode string and whose type string is equal to format, if there is\n            // one. Add an item to the drag data store item list whose kind is Plain\n            // Unicode string, whose type string is equal to format, and whose data\n            // is the string given by the method's second argument.\n            this.typeTable[format] = data;\n            this.types = Object.keys(this.typeTable);\n        };\n        /**\n         * Removes the data of the specified formats. Removes all data if the\n         * argument is omitted.\n         */\n        DataTransfer.prototype.clearData = function (format) {\n            var _this = this;\n            // If the DataTransfer object is no longer associated with a drag data\n            // store, abort these steps. Nothing happens.\n            if (!this.store) {\n                return;\n            }\n            // If the drag data store's mode is not the read/write mode, abort these\n            // steps. Nothing happens.\n            if (this.store.mode !== \"readwrite\") {\n                return;\n            }\n            // If the method was called with no arguments, remove each item in the\n            // drag data store item list whose kind is Plain Unicode string, and abort\n            // these steps.\n            if (typeof format === \"undefined\") {\n                // Note: The clearData() method does not affect whether any files were\n                // included in the drag, so the types attribute's list might still not\n                // be empty after calling clearData() (it would still contain the\n                // \"Files\" string if any files were included in the drag).\n                this.types.filter(function (type) { return type !== \"Files\"; })\n                    .forEach(function (type) { return _this.clearData(type); });\n                return;\n            }\n            // Let format be the first argument, converted to ASCII lowercase.\n            format = format.toLowerCase();\n            // If format equals \"text\", change it to \"text/plain\".\n            // If format equals \"url\", change it to \"text/uri-list\".\n            if (format === \"text\") {\n                format = \"text/plain\";\n            }\n            else if (format === \"url\") {\n                format = \"text/uri-list\";\n            }\n            // Remove the item in the drag data store item list whose kind is Plain\n            // Unicode string and whose type string is equal to format, if there is\n            // one.\n            delete this.typeTable[format];\n            this.types = Object.keys(this.typeTable);\n        };\n        return DataTransfer;\n    }());\n    dnd.DataTransfer = DataTransfer;\n    /**\n     * @see https://w3c.github.io/FileAPI/#filelist-section\n     */\n    var FileList = (function () {\n        function FileList() {\n            this.length = 0;\n        }\n        // NOTE: This implementation can represent only empty FileList.\n        FileList.prototype.item = function (index) {\n            return null;\n        };\n        return FileList;\n    }());\n    dnd.FileList = FileList;\n    /**\n     * The data that underlies a drag-and-drop operation, known as the drag data\n     * store, consists of the following information:\n     *\n     */\n    var DragDataStore = (function () {\n        function DragDataStore() {\n        }\n        return DragDataStore;\n    }());\n    /**\n     * Each DataTransfer object is associated with a DataTransferItemList object.\n     * @see https://html.spec.whatwg.org/multipage/interaction.html#datatransferitemlist\n     */\n    var DataTransferItemList = (function () {\n        function DataTransferItemList(store) {\n            this.store = store;\n            /**\n             * Each DataTransfer object is associated with a DataTransferItemList\n             * object.\n             */\n            this.items = [];\n            /**\n             * @see DataTransferItemList#add\n             */\n            this.typeTable = {};\n            /**\n             * Returns the number of items in the drag data store.\n             */\n            this.length = 0;\n        }\n        /**\n         * Removes the indexth entry in the drag data store.\n         */\n        DataTransferItemList.prototype.remove = function (idx) {\n            // If the DataTransferItemList object is not in the read/write mode, throw\n            // an InvalidStateError exception and abort these steps.\n            if (this.store.mode !== \"readwrite\") {\n                throw InvalidStateError.createByDefaultMessage();\n            }\n            // Remove the ith item from the drag data store.\n            var removed = this.items.splice(idx, 1)[0];\n            this.syncInternal();\n            if (removed) {\n                delete this.typeTable[removed.type];\n            }\n        };\n        /**\n         * Removes all the entries in the drag data store.\n         */\n        DataTransferItemList.prototype.clear = function () {\n            // If the DataTransferItemList object is not in the read/write mode, throw\n            // an InvalidStateError exception and abort these steps.\n            if (this.store.mode !== \"readwrite\") {\n                throw InvalidStateError.createByDefaultMessage();\n            }\n            // Remove the ith item from the drag data store.\n            this.items = [];\n            this.syncInternal();\n        };\n        DataTransferItemList.prototype.add = function (data, type) {\n            // If the DataTransferItemList object is not in the read/write mode,\n            // return null and abort these steps.\n            if (this.store.mode !== \"readwrite\") {\n                return null;\n            }\n            // Jump to the appropriate set of steps from the following list:\n            //   A: If the first argument to the method is a string\n            //   B: If the first argument to the method is a File\n            if (typeof data === \"string\") {\n                // If there is already an item in the drag data store item list whose\n                // kind is Plain Unicode string and whose type string is equal to the\n                // value of the method's second argument, converted to ASCII lowercase,\n                // then throw a NotSupportedError exception and abort these steps.\n                var typeLowerCase = type.toLowerCase();\n                if (this.typeTable[typeLowerCase]) {\n                    throw NotSupportedError.createByDefaultMessage();\n                }\n                // Otherwise, add an item to the drag data store item list whose kind is\n                // Plain Unicode string, whose type string is equal to the value of the\n                // method's second argument, converted to ASCII lowercase, and whose\n                // data is the string given by the method's first argument.\n                var stringItem = DataTransferItem.createForString(data, typeLowerCase, this.store);\n                this.items.push(stringItem);\n                this.typeTable[typeLowerCase] = true;\n            }\n            else {\n                // Add an item to the drag data store item list whose kind is File,\n                // whose type string is the type of the File, converted to ASCII\n                // lowercase, and whose data is the same as the File's data.\n                var fileItem = DataTransferItem.createForFile(data, this.store);\n                this.items.push(fileItem);\n            }\n            this.syncInternal();\n        };\n        DataTransferItemList.prototype.syncInternal = function () {\n            var _this = this;\n            for (var i = 0; i < this.length; i++) {\n                delete this[i];\n            }\n            this.items.forEach(function (item, j) {\n                _this[j] = item;\n            });\n            this.length = this.items.length;\n        };\n        return DataTransferItemList;\n    }());\n    dnd.DataTransferItemList = DataTransferItemList;\n    /**\n     * While the DataTransferItem object's DataTransfer object is associated with\n     * a drag data store and that drag data store's drag data store item list\n     * still contains the item that the DataTransferItem object represents, the\n     * DataTransferItem object's mode is the same as the drag data store mode.\n     * When the DataTransferItem object's DataTransfer object is not associated\n     * with a drag data store, or if the item that the DataTransferItem object\n     * represents has been removed from the relevant drag data store item list,\n     * the DataTransferItem object's mode is the disabled mode. The drag data\n     * store referenced in this section (which is used only when the\n     * DataTransferItem object is not in the disabled mode) is the drag data store\n     * with which the DataTransferItem object's DataTransfer object is associated.\n     *\n     * @see https://html.spec.whatwg.org/multipage/interaction.html#datatransferitem\n     */\n    var DataTransferItem = (function () {\n        function DataTransferItem(data, kind, typeLowerCase, store) {\n            this.data = data;\n            this.store = store;\n            this.type = typeLowerCase;\n            this.kind = kind;\n        }\n        DataTransferItem.prototype.getAsString = function (callback) {\n            var _this = this;\n            // If the callback is null, abort these steps.\n            if (callback) {\n                return;\n            }\n            // If the DataTransferItem object is not in the read/write mode or the\n            // read-only mode, abort these steps. The callback is never invoked.\n            if (this.store.mode !== \"readwrite\") {\n                return;\n            }\n            // If the drag data item kind is not Plain Unicode string, abort these\n            // steps. The callback is never invoked.\n            if (this.kind !== \"string\") {\n                return;\n            }\n            // Otherwise, queue a task to invoke callback, passing the actual data of\n            // the item represented by the DataTransferItem object as the argument.\n            setTimeout(function () {\n                callback(_this.data);\n            }, 0);\n        };\n        DataTransferItem.prototype.getAsFile = function () {\n            // If the DataTransferItem object is not in the read/write mode or the\n            // read-only mode, return null and abort these steps.\n            if (this.store.mode !== \"readwrite\") {\n                return null;\n            }\n            // If the drag data item kind is not File, then return null and abort\n            // these steps.\n            if (this.kind !== \"string\") {\n                return null;\n            }\n            // Return a new File object representing the actual data of the item\n            // represented by the DataTransferItem object.\n            return this.data;\n        };\n        DataTransferItem.createForString = function (data, type, store) {\n            return new DataTransferItem(data, \"string\", type, store);\n        };\n        DataTransferItem.createForFile = function (data, store) {\n            return new DataTransferItem(data, \"file\", null, store);\n        };\n        return DataTransferItem;\n    }());\n    /**\n     * @see https://heycam.github.io/webidl/#invalidstateerror\n     */\n    var InvalidStateError = (function (_super) {\n        __extends(InvalidStateError, _super);\n        function InvalidStateError(message) {\n            _super.call(this, message);\n            this.message = message;\n            this.name = \"InvalidStateError\";\n        }\n        InvalidStateError.createByDefaultMessage = function () {\n            return new InvalidStateError(\"The object is in an invalid state\");\n        };\n        return InvalidStateError;\n    }(Error));\n    /**\n     * @see https://heycam.github.io/webidl/#notsupportederror\n     */\n    var NotSupportedError = (function (_super) {\n        __extends(NotSupportedError, _super);\n        function NotSupportedError(message) {\n            _super.call(this, message);\n            this.message = message;\n            this.name = \"NotSupportedError\";\n        }\n        NotSupportedError.createByDefaultMessage = function () {\n            return new InvalidStateError(\"The operation is not supported\");\n        };\n        return NotSupportedError;\n    }(Error));\n    /**\n     * Return an array of URL strings.\n     * @see http://tools.ietf.org/html/rfc2483\n     */\n    function parseTextUriList(textUriList) {\n        // As for all text/(*) formats, lines are terminated with a CRLF pair.\n        textUriList = textUriList.replace(/\\r\\n$/, \"\");\n        if (textUriList === \"\") {\n            return [];\n        }\n        return textUriList.split(/\\r\\n/).filter(function (line) {\n            // Any lines beginning with the '#' character are comment lines\n            // and are ignored during processing.\n            // The remaining non-comment lines shall be URIs (URNs or URLs),\n            // encoded according to the URL or URN specifications (RFC2141,\n            // RFC1738 and RFC2396). Each URI shall appear on one and only one\n            // line. Very long URIs are not broken in the text/uri-list format.\n            // Content-transfer-encodings may be used to enforce line length\n            // limitations.\n            return line[0] !== \"#\";\n        });\n    }\n    dnd.parseTextUriList = parseTextUriList;\n    ;\n})(dnd || (dnd = {}));\n;\n    \n    var draggable = document.querySelector(selectorDraggable);\n    var droppable = document.querySelector(selectorDroppable);\n\n    dnd.simulate(draggable, droppable);\n  })(arguments[0], arguments[1]);","#drag1,#div1"],"startTime":1675331236227,"endTime":1675331236245,"elapsedTime":18,"status":"pass","result":{"status":0}},{"name":"pause","args":["2000"],"startTime":1675331236246,"endTime":1675331238247,"elapsedTime":2001,"status":"pass"}],"passed":0,"errors":0,"failed":0,"skipped":0,"tests":0,"status":"pass"},"__after_hook":{"time":0,"assertions":[],"commands":[],"passed":0,"errors":0,"failed":0,"skipped":0,"tests":0,"status":"pass"},"__global_afterEach_hook":{"time":0,"assertions":[],"commands":[{"name":"end","args":["true"],"startTime":1675331238252,"endTime":1675331238309,"elapsedTime":57,"status":"pass"}],"passed":0,"errors":0,"failed":0,"skipped":0,"tests":0,"status":"pass"}},"errmessages":[],"testsCount":1,"skippedCount":0,"failedCount":0,"errorsCount":0,"passedCount":0,"group":"","modulePath":"/home/nouveua/nightwatchjs/tests/testDnD.js","startTimestamp":"Thu, 02 Feb 2023 09:47:12 GMT","endTimestamp":"Thu, 02 Feb 2023 09:47:18 GMT","sessionCapabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"109.0.5414.119","chrome":{"chromedriverVersion":"109.0.5414.74 (e7c5703604daa9cc128ccf5a5d3e993513758913-refs/branch-heads/5414@{#1172})","userDataDir":"/tmp/.com.google.Chrome.X9JGx3"},"goog:chromeOptions":{"debuggerAddress":"localhost:33635"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true},"sessionId":"7ddb70cb8107662138cfe4782d5b800e","projectName":"","buildName":"","testEnv":"chrome","isMobile":false,"status":"skip","seleniumLog":"/home/nouveua/nightwatchjs/logs/testDnD_chromedriver.log","host":"localhost","tests":1,"failures":0,"errors":0,"httpOutput":[["2023-02-02T09:47:13.012Z","  Request <b><span style=\"color:#0AA\">POST /session  </span></b>","{\n     capabilities: {\n       firstMatch: [ {} ],\n       alwaysMatch: {\n         browserName: <span style=\"color:#0A0\">&#39;chrome&#39;<span style=\"color:#FFF\">,\n         <span style=\"color:#0A0\">&#39;goog:chromeOptions&#39;<span style=\"color:#FFF\">: { w3c: <span style=\"color:#A50\">true<span style=\"color:#FFF\">, args: [] }\n       }\n     }\n  }</span></span></span></span></span></span>"],["2023-02-02T09:47:13.253Z","  Response 200 POST /session (243ms)","{\n     value: {\n       capabilities: {\n         acceptInsecureCerts: <span style=\"color:#A50\">false<span style=\"color:#FFF\">,\n         browserName: <span style=\"color:#0A0\">&#39;chrome&#39;<span style=\"color:#FFF\">,\n         browserVersion: <span style=\"color:#0A0\">&#39;109.0.5414.119&#39;<span style=\"color:#FFF\">,\n         chrome: {\n           chromedriverVersion: <span style=\"color:#0A0\">&#39;109.0.5414.74 (e7c5703604daa9cc128ccf5a5d3e993513758913-refs/branch-heads/5414@{#1172})&#39;<span style=\"color:#FFF\">,\n           userDataDir: <span style=\"color:#0A0\">&#39;/tmp/.com.google.Chrome.X9JGx3&#39;<span style=\"color:#FFF\">\n         },\n         <span style=\"color:#0A0\">&#39;goog:chromeOptions&#39;<span style=\"color:#FFF\">: { debuggerAddress: <span style=\"color:#0A0\">&#39;localhost:33635&#39;<span style=\"color:#FFF\"> },\n         networkConnectionEnabled: <span style=\"color:#A50\">false<span style=\"color:#FFF\">,\n         pageLoadStrategy: <span style=\"color:#0A0\">&#39;normal&#39;<span style=\"color:#FFF\">,\n         platformName: <span style=\"color:#0A0\">&#39;linux&#39;<span style=\"color:#FFF\">,\n         proxy: {},\n         setWindowRect: <span style=\"color:#A50\">true<span style=\"color:#FFF\">,\n         strictFileInteractability: <span style=\"color:#A50\">false<span style=\"color:#FFF\">,\n         timeouts: { implicit: <span style=\"color:#A50\">0<span style=\"color:#FFF\">, pageLoad: <span style=\"color:#A50\">300000<span style=\"color:#FFF\">, script: <span style=\"color:#A50\">30000<span style=\"color:#FFF\"> },\n         unhandledPromptBehavior: <span style=\"color:#0A0\">&#39;dismiss and notify&#39;<span style=\"color:#FFF\">,\n         <span style=\"color:#0A0\">&#39;webauthn:extension:credBlob&#39;<span style=\"color:#FFF\">: <span style=\"color:#A50\">true<span style=\"color:#FFF\">,\n         <span style=\"color:#0A0\">&#39;webauthn:extension:largeBlob&#39;<span style=\"color:#FFF\">: <span style=\"color:#A50\">true<span style=\"color:#FFF\">,\n         <span style=\"color:#0A0\">&#39;webauthn:virtualAuthenticators&#39;<span style=\"color:#FFF\">: <span style=\"color:#A50\">true<span style=\"color:#FFF\">\n       },\n       sessionId: <span style=\"color:#0A0\">&#39;7ddb70cb8107662138cfe4782d5b800e&#39;<span style=\"color:#FFF\">\n     }\n  }</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>"],["2023-02-02T09:47:13.262Z","  Request <b><span style=\"color:#0AA\">POST /session/7ddb70cb8107662138cfe4782d5b800e/url  </span></b>","{ url: <span style=\"color:#0A0\">&#39;http://tutorials.actionqa.com/yt/nw/dndexample.htm&#39;<span style=\"color:#FFF\"> }</span></span>"],["2023-02-02T09:47:14.220Z","  Response 200 POST /session/7ddb70cb8107662138cfe4782d5b800e/url (958ms)","{ value: <b>null<span style=\"font-weight:normal;text-decoration:none;font-style:normal\"> }</span></b>"],["2023-02-02T09:47:16.229Z","  Request <b><span style=\"color:#0AA\">POST /session/7ddb70cb8107662138cfe4782d5b800e/execute/sync  </span></b>","{\n     script: <span style=\"color:#0A0\">&#39;  (function(selectorDraggable, selectorDroppable) {\\n&#39;<span style=\"color:#FFF\"> +\n       <span style=\"color:#0A0\">&#39;    var __extends = (this &amp;&amp; this.__extends) || function (d, b) {\\n&#39;<span style=\"color:#FFF\"> +\n       <span style=\"color:#0A0\">&#39;    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\\n&#39;<span style=\"color:#FFF\"> +\n       <span style=\"color:#0A0\">&#39;    function __() { thi... (20178 characters)&#39;<span style=\"color:#FFF\">,\n     args: [ <span style=\"color:#0A0\">&#39;#drag1&#39;<span style=\"color:#FFF\">, <span style=\"color:#0A0\">&#39;#div1&#39;<span style=\"color:#FFF\"> ]\n  }</span></span></span></span></span></span></span></span></span></span></span></span>"],["2023-02-02T09:47:16.245Z","  Response 200 POST /session/7ddb70cb8107662138cfe4782d5b800e/execute/sync (17ms)","{ value: <b>null<span style=\"font-weight:normal;text-decoration:none;font-style:normal\"> }</span></b>"],["2023-02-02T09:47:18.255Z","  Request <b><span style=\"color:#0AA\">DELETE /session/7ddb70cb8107662138cfe4782d5b800e  </span></b>","<span style=\"color:#0A0\">&#39;&#39;<span style=\"color:#FFF\"></span></span>"],["2023-02-02T09:47:18.307Z","  Response 200 DELETE /session/7ddb70cb8107662138cfe4782d5b800e (52ms)","{ value: <b>null<span style=\"font-weight:normal;text-decoration:none;font-style:normal\"> }</span></b>"]],"rawHttpOutput":[["2023-02-02T09:47:13.012Z","  Request POST /session  ","{\n     capabilities: {\n       firstMatch: [ {} ],\n       alwaysMatch: {\n         browserName: 'chrome',\n         'goog:chromeOptions': { w3c: true, args: [] }\n       }\n     }\n  }"],["2023-02-02T09:47:13.253Z","  Response 200 POST /session (243ms)","{\n     value: {\n       capabilities: {\n         acceptInsecureCerts: false,\n         browserName: 'chrome',\n         browserVersion: '109.0.5414.119',\n         chrome: {\n           chromedriverVersion: '109.0.5414.74 (e7c5703604daa9cc128ccf5a5d3e993513758913-refs/branch-heads/5414@{#1172})',\n           userDataDir: '/tmp/.com.google.Chrome.X9JGx3'\n         },\n         'goog:chromeOptions': { debuggerAddress: 'localhost:33635' },\n         networkConnectionEnabled: false,\n         pageLoadStrategy: 'normal',\n         platformName: 'linux',\n         proxy: {},\n         setWindowRect: true,\n         strictFileInteractability: false,\n         timeouts: { implicit: 0, pageLoad: 300000, script: 30000 },\n         unhandledPromptBehavior: 'dismiss and notify',\n         'webauthn:extension:credBlob': true,\n         'webauthn:extension:largeBlob': true,\n         'webauthn:virtualAuthenticators': true\n       },\n       sessionId: '7ddb70cb8107662138cfe4782d5b800e'\n     }\n  }"],["2023-02-02T09:47:13.262Z","  Request POST /session/7ddb70cb8107662138cfe4782d5b800e/url  ","{ url: 'http://tutorials.actionqa.com/yt/nw/dndexample.htm' }"],["2023-02-02T09:47:14.220Z","  Response 200 POST /session/7ddb70cb8107662138cfe4782d5b800e/url (958ms)","{ value: null }"],["2023-02-02T09:47:16.229Z","  Request POST /session/7ddb70cb8107662138cfe4782d5b800e/execute/sync  ","{\n     script: '  (function(selectorDraggable, selectorDroppable) {\\n' +\n       '    var __extends = (this &amp;&amp; this.__extends) || function (d, b) {\\n' +\n       '    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\\n' +\n       '    function __() { thi... (20178 characters)',\n     args: [ '#drag1', '#div1' ]\n  }"],["2023-02-02T09:47:16.245Z","  Response 200 POST /session/7ddb70cb8107662138cfe4782d5b800e/execute/sync (17ms)","{ value: null }"],["2023-02-02T09:47:18.255Z","  Request DELETE /session/7ddb70cb8107662138cfe4782d5b800e  ","''"],["2023-02-02T09:47:18.307Z","  Response 200 DELETE /session/7ddb70cb8107662138cfe4782d5b800e (52ms)","{ value: null }"]]},"name":"testDnD","httpOutput":[],"systemerr":""}